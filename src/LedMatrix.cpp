/***************************************************************************************\
*   File:                                                                               *
*       LedMatrix.cpp                                                                   *
*                                                                                       *
*   Abstract:                                                                           *
*       aip1640 (TM1640 LED) Led display code                                           *
*                                                                                       *
*   Author:                                                                             *
*       G Shabanov  29-Dec-2023                                                         *
*                                                                                       *
*   Revision History:                                                                   *
\***************************************************************************************/
// $Id: $
#include <avr/eeprom.h>
#include <avr/pgmspace.h>
#include <arduino.h>

//#include <avr/pgmspace.h>
#include <avr/interrupt.h>
#include "inc\defines.h"
#include "inc\LedMatrix.h"
#include "inc\Timer.h"

#define SCL_Pin  A5  // set the pin of clock to A5
#define SDA_Pin  A4  // set the data pin to A4

#define AIP_ADDRESS_CTRL      0b11000000   // 0xC0
#define AIP_DISPLAY_CTRL      0b10000000   // 0x80
#define AIP_SETTING_CTRL      0b01000000   // 0xC0

#define AIP_BRIGHTNESS_VALID  0b00000111

#define AIP_BRIGHTNESS_1_16   0b10001000   // 0x88
#define AIP_BRIGHTNESS_2_16   0b10001001   // 0x89
#define AIP_BRIGHTNESS_4_16   0b10001010   // 0x8A
#define AIP_BRIGHTNESS_10_16  0b10001011   // 0x8B
#define AIP_BRIGHTNESS_11_16  0b10001100   // 0x8C
#define AIP_BRIGHTNESS_12_16  0b10001101   // 0x8D
#define AIP_BRIGHTNESS_13_16  0b10001110   // 0x8E
#define AIP_BRIGHTNESS_14_16  0b10001111   // 0x8F

#define AIP_BRIGHTNESS_OFF    0b00000000   // 0x8A
#define AIP_BRIGHTNESS_ON     0b00001000   // 0x8A

#define SCL_Port (1 << 5)
#define SDA_Port (1 << 4)
#define SCL_High() (_SFR_BYTE(PORTC) |= SCL_Port)
#define SCL_Low()  (_SFR_BYTE(PORTC) &= ~SCL_Port)
#define SDA_High() (_SFR_BYTE(PORTC) |= SDA_Port)
#define SDA_Low()  (_SFR_BYTE(PORTC) &= ~SDA_Port)


//Array, used to save data of images, can be calculated by yourself or gotten from modulus tool
const uint8_t start01[] PROGMEM = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01 };

/*unsigned char start01_2[] = { 0b00001110,
                              0b00010001,
                              0b00010101,
                              0b00010001,
                              0b00001110,
                              0b00000000,
                              0b01000000,
                              0b10000000,
                              0b10000000,
                              0b01000000,
                              0b00000000,
                              0b00001110,
                              0b00010001,
                              0b00010101,
                              0b00010001,
                              0b00001110
                              };*/


//unsigned char Smile[]   = {0x00, 0x00, 0x1c, 0x02, 0x02, 0x02, 0x5c, 0x40, 0x40, 0x5c, 0x02, 0x02, 0x02, 0x1c, 0x00, 0x00};
const uint8_t Smile[] PROGMEM = { 0b00001110,
                              0b00010001,
                              0b00010101,
                              0b00010001,
                              0b00001110,
                              0b00000000,
                              0b01000000,
                              0b10000000,
                              0b10000000,
                              0b01000000,
                              0b00000000,
                              0b00001110,
                              0b00010001,
                              0b00010101,
                              0b00010001,
                              0b00001110
};

const uint8_t Disgust[] = { 0x00, 0x00, 0x02, 0x02, 0x02, 0x12, 0x08, 0x04, 0x08, 0x12, 0x22, 0x02, 0x02, 0x00, 0x00, 0x00 };
//unsigned char Happy[] = { 0x02, 0x02, 0x02, 0x02, 0x08, 0x18, 0x28, 0x48, 0x28, 0x18, 0x08, 0x02, 0x02, 0x02, 0x02, 0x00 };
const uint8_t Happy[] PROGMEM = { 0b00000000,
                          0b00000000,
                          0b00111100,
                          0b01000010,
                          0b01001010,
                          0b10000001,
                          0b10001111,
                          0b11110001,
                          0b10000001,
                          0b01001010,
                          0b01000010,
                          0b00100100,
                          0b00010100,
                          0b00001100,
                          0b00000000,
                          0b00000000 };


const uint8_t Squint[] PROGMEM = { 0x00, 0x00, 0x00, 0x41, 0x22, 0x14, 0x48, 0x40, 0x40, 0x48, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00 };
const uint8_t Despise[] PROGMEM = { 0x00, 0x00, 0x06, 0x04, 0x04, 0x04, 0x24, 0x20, 0x20, 0x26, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 };
const uint8_t Heart[] PROGMEM = { 0x00, 0x00, 0x0C, 0x1E, 0x3F, 0x7F, 0xFE, 0xFC, 0xFE, 0x7F, 0x3F, 0x1E, 0x0C, 0x00, 0x00, 0x00 };

const uint8_t STOP01[] PROGMEM = { 0x2E, 0x2A, 0x3A, 0x00, 0x02, 0x3E, 0x02, 0x00, 0x3E, 0x22, 0x3E, 0x00, 0x3E, 0x0A, 0x0E, 0x00 };
const uint8_t front[] PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x12, 0x09, 0x12, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t back[] PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x48, 0x90, 0x48, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t left[] PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x28, 0x10, 0x44, 0x28, 0x10, 0x44, 0x28, 0x10, 0x00 };
const uint8_t right[] PROGMEM = { 0x00, 0x10, 0x28, 0x44, 0x10, 0x28, 0x44, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const uint8_t Test[] PROGMEM = { 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF };

/* Standard ASCII 6x8 font */
const uint8_t ssd1306xled_font6x8[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //   0 
  0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, // ! 1 
  0x00, 0x00, 0x07, 0x00, 0x07, 0x00, // " 2 
  0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14, // # 3 
  0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12, // $ 4 
  0x00, 0x23, 0x13, 0x08, 0x64, 0x62, // % 5 
  0x00, 0x36, 0x49, 0x55, 0x22, 0x50, // & 6 
  0x00, 0x00, 0x05, 0x03, 0x00, 0x00, // ' 7 
  0x00, 0x00, 0x1c, 0x22, 0x41, 0x00, // ( 8 
  0x00, 0x00, 0x41, 0x22, 0x1c, 0x00, // ) 9 
  0x00, 0x14, 0x08, 0x3E, 0x08, 0x14, // * 10
  0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, // + 11
  0x00, 0x00, 0x00, 0xA0, 0x60, 0x00, // , 12
  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, // - 13
  0x00, 0x00, 0x60, 0x60, 0x00, 0x00, // . 14
  0x00, 0x20, 0x10, 0x08, 0x04, 0x02, // / 15
  0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 16
  0x00, 0x00, 0x42, 0x7F, 0x40, 0x00, // 1 17
  0x00, 0x42, 0x61, 0x51, 0x49, 0x46, // 2 18
  0x00, 0x21, 0x41, 0x45, 0x4B, 0x31, // 3 19
  0x00, 0x18, 0x14, 0x12, 0x7F, 0x10, // 4 20
  0x00, 0x27, 0x45, 0x45, 0x45, 0x39, // 5 21
  0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30, // 6 22
  0x00, 0x01, 0x71, 0x09, 0x05, 0x03, // 7 23
  0x00, 0x36, 0x49, 0x49, 0x49, 0x36, // 8 24
  0x00, 0x06, 0x49, 0x49, 0x29, 0x1E, // 9 25
  0x00, 0x00, 0x36, 0x36, 0x00, 0x00, // : 26
  0x00, 0x00, 0x56, 0x36, 0x00, 0x00, // ; 27
  0x00, 0x08, 0x14, 0x22, 0x41, 0x00, // < 28
  0x00, 0x14, 0x14, 0x14, 0x14, 0x14, // = 29
  0x00, 0x00, 0x41, 0x22, 0x14, 0x08, // > 30
  0x00, 0x02, 0x01, 0x51, 0x09, 0x06, // ? 31
  0x00, 0x32, 0x49, 0x59, 0x51, 0x3E, // @ 32
  0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C, // A 33
  0x00, 0x7F, 0x49, 0x49, 0x49, 0x36, // B 34
  0x00, 0x3E, 0x41, 0x41, 0x41, 0x22, // C 35
  0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C, // D 36
  0x00, 0x7F, 0x49, 0x49, 0x49, 0x41, // E 37
  0x00, 0x7F, 0x09, 0x09, 0x09, 0x01, // F 38
  0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A, // G 39
  0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F, // H 40
  0x00, 0x00, 0x41, 0x7F, 0x41, 0x00, // I 41
  0x00, 0x20, 0x40, 0x41, 0x3F, 0x01, // J 42
  0x00, 0x7F, 0x08, 0x14, 0x22, 0x41, // K 43
  0x00, 0x7F, 0x40, 0x40, 0x40, 0x40, // L 44
  0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 45
  0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F, // N 46
  0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E, // O 47
  0x00, 0x7F, 0x09, 0x09, 0x09, 0x06, // P 48
  0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E, // Q 49
  0x00, 0x7F, 0x09, 0x19, 0x29, 0x46, // R 50
  0x00, 0x46, 0x49, 0x49, 0x49, 0x31, // S 51
  0x00, 0x01, 0x01, 0x7F, 0x01, 0x01, // T 52
  0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F, // U 53
  0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F, // V 54
  0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F, // W 55
  0x00, 0x63, 0x14, 0x08, 0x14, 0x63, // X 56
  0x00, 0x07, 0x08, 0x70, 0x08, 0x07, // Y 57
  0x00, 0x61, 0x51, 0x49, 0x45, 0x43, // Z 58
  0x00, 0x00, 0x7F, 0x41, 0x41, 0x00, // [ 59
  0x00, 0x02, 0x04, 0x08, 0x10, 0x20, // \ 60
  0x00, 0x00, 0x41, 0x41, 0x7F, 0x00, // ] 61
  0x00, 0x04, 0x02, 0x01, 0x02, 0x04, // ^ 62
  0x00, 0x40, 0x40, 0x40, 0x40, 0x40, // _ 63
  0x00, 0x00, 0x01, 0x02, 0x04, 0x00, // ' 64
  0x00, 0x20, 0x54, 0x54, 0x54, 0x78, // a 65
  0x00, 0x7F, 0x48, 0x44, 0x44, 0x38, // b 66
  0x00, 0x38, 0x44, 0x44, 0x44, 0x20, // c 67
  0x00, 0x38, 0x44, 0x44, 0x48, 0x7F, // d 68
  0x00, 0x38, 0x54, 0x54, 0x54, 0x18, // e 69
  0x00, 0x08, 0x7E, 0x09, 0x01, 0x02, // f 70
  0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C, // g 71
  0x00, 0x7F, 0x08, 0x04, 0x04, 0x78, // h 72
  0x00, 0x00, 0x44, 0x7D, 0x40, 0x00, // i 73
  0x00, 0x40, 0x80, 0x84, 0x7D, 0x00, // j 74
  0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, // k 75
  0x00, 0x00, 0x41, 0x7F, 0x40, 0x00, // l 76
  0x00, 0x7C, 0x04, 0x18, 0x04, 0x78, // m 77
  0x00, 0x7C, 0x08, 0x04, 0x04, 0x78, // n 78
  0x00, 0x38, 0x44, 0x44, 0x44, 0x38, // o 79
  0x00, 0xFC, 0x24, 0x24, 0x24, 0x18, // p 80
  0x00, 0x18, 0x24, 0x24, 0x18, 0xFC, // q 81
  0x00, 0x7C, 0x08, 0x04, 0x04, 0x08, // r 82
  0x00, 0x48, 0x54, 0x54, 0x54, 0x20, // s 83
  0x00, 0x04, 0x3F, 0x44, 0x40, 0x20, // t 84
  0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C, // u 85
  0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C, // v 86
  0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C, // w 87
  0x00, 0x44, 0x28, 0x10, 0x28, 0x44, // x 88
  0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C, // y 89
  0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, // z 90
  0x00, 0x08, 0x36, 0x41, 0x41, 0x00, // { 91
  0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, // | 92
  0x00, 0x00, 0x41, 0x41, 0x36, 0x08, // } 93
  0x00, 0x08, 0x04, 0x08, 0x10, 0x08, // ~ 94
};

BANNER_INFO    HelloBanner = {

    0,
    -1,
    -(sizeof("Hello!!") * 3),
    4,
    "Hello!!"
};


void
CLedMatrix::Init()
{

    //
    //
    //
    /*
    *  #define PIN_A4   (18)
    *  #define PIN_A5   (19)
    */

    pinMode(SCL_Pin, OUTPUT);
    pinMode(SDA_Pin, OUTPUT);

    SDA_High();
    SCL_High();

    setBrightness(2);


    display();    //clear screen

    CTimer::Get().SetCounter(LedTimer, -5010);
}


void
CLedMatrix::Update()
{

    if (CTimer::Get().IsTimerFinish(LedTimer))
    {

        if (p_banner != 0)
        {

            PBANNER_INFO  banner = p_banner;

            printString(banner->string, banner->offset);

            p_banner = banner;

            if (banner->offset > banner->maxScroll)
            {
                banner->inc = -1;
            }

            if (banner->offset < banner->minScroll)
            {
                banner->inc = 1;
            }

            banner->offset += banner->inc;
        }
    }
}

void
CLedMatrix::setBrightness(uint8_t value, bool on)
{
    IIC_start();
    IIC_send(AIP_DISPLAY_CTRL | (value & AIP_BRIGHTNESS_VALID) | (on ? AIP_BRIGHTNESS_ON : AIP_BRIGHTNESS_OFF));
    IIC_end();
}

/***************dot matrix******************/
//this function is used for the display of dot matrix 
void CLedMatrix::display(const uint8_t *matrix_value)
{
    p_banner = NULL;

    IIC_start();     // use the function to start transmitting data
    IIC_send(AIP_ADDRESS_CTRL);  // select an address

    for (int i = 0; i < 16; i++) //image data have 16 characters
    {
        if (matrix_value != NULL)
        {
            uint8_t  value = pgm_read_byte(matrix_value + i);

            IIC_send(value); //data to transmit pictures
        }
        else
        {
            IIC_send(0x00); //data to transmit pictures
        }
    }

    IIC_end();   //end the data transmission of pictures
}

void
CLedMatrix::displayPrivate(const uint8_t* matrix_value)
{

    IIC_start();     // use the function to start transmitting data
    IIC_send(AIP_ADDRESS_CTRL);  // select an address

    for (int i = 0; i < 16; i++) //image data have 16 characters
    {
        if (matrix_value != NULL)
        {

            IIC_send(matrix_value[i]); //data to transmit pictures
        }
        else
        {
            IIC_send(0x00); //data to transmit pictures
        }
    }

    IIC_end();   //end the data transmission of pictures
}

void
CLedMatrix::displayChar(char value)
{
    unsigned char disp[16];

    p_banner = NULL;

    if (value < 32 || value > 126)
        return;

    value -= 32;

    memset(disp, 0, 16);
    memcpy_P(disp + 4, (void*)((char*)ssd1306xled_font6x8 + 6 * value), 6);

    displayPrivate(disp);
}

void
CLedMatrix::printString(char* value, int16_t shift)
{
    unsigned char disp[16];

    p_banner = NULL;

    uint8_t  dispOffset = 0;
    uint16_t skip = 0;
    uint16_t offset = 0;

    if (shift < 0)
    {
        shift = -shift;

        skip = shift / 6;
        offset = shift % 6;

    }
    else
    {
        dispOffset = shift;

        if (shift > 15)
            return;
    }


    memset(disp, 0, 16);

    while (*value)
    {
        char dispChar;
        if (skip != 0)
        {
            value++;
            skip--;
            continue;
        }

        if (*value < 32 || *value > 126) {
            value++;
            continue;
        }

        dispChar = *value - 32;

        for (int i = offset; i < 6; i++)
        {
            if (dispOffset > 15)
                break;

            if (i < 6)
            {
                disp[dispOffset] = pgm_read_byte((char*)ssd1306xled_font6x8 + 6 * dispChar + i);
            }
            else
            {
                disp[dispOffset] = 0;
            }

            dispOffset++;

        }

        offset = 0;

        if (dispOffset > 15)
            break;

        value++;
    }

    displayPrivate(disp);
}

// the condition that data starts transmitting
void CLedMatrix::IIC_start()
{
    //delayMicroseconds(1);
    _NOP();
    SDA_Low();
    SCL_Low();
}

//transmit data
void CLedMatrix::IIC_send(unsigned char send_data)
{
    for (byte mask = 0x01; mask != 0; mask <<= 1) // each character has 8 digits, which is detected one by one
    {
        if (send_data & mask) // set high or low levels in light of each bit(0 or 1)
        { 
            SDA_High();
        }
        else {
            SDA_Low();
        }

        // pull up the clock pin SCL_Pin to end the transmission of data
        SCL_High();

        //delayMicroseconds(1);
        _NOP();

        // pull down the clock pin SCL_Pin to change signals of SDA 
        SCL_Low();
        SDA_Low();
    }
}

//the sign that transmission of data ends
void CLedMatrix::IIC_end()
{
    SCL_High();
    SDA_High();
    _NOP();
    //delayMicroseconds(1);
}

